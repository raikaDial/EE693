// ***** DSP Libraries ***** //
#define ARM_MATH_CM4
#define __FPU_PRESENT 1
#include <stdint.h>
#include <arm_math.h>

#include "ECG_Filter.h"
#include "IIR_filter.h"
ECG_Filter ecg_filter;
float ekgc[800] = { // ekg signal + noise at 60 Hz, 120 Hz, and 180 Hz
  2.402932287,
  2.381941588,
  1.447517993,
  0.712911803,
  0.785050022,
  1.271286169,
  1.360221519,
  0.744491929,
  -0.148802449,
  -0.785386605,
  -1.173732176,
  -1.728983891,
  -2.537089823,
  -2.975516949,
  -2.262543992,
  -0.394098825,
  1.613251825,
  2.552221672,
  2.118928741,
  1.130637032,
  0.647668343,
  0.942293875,
  1.377094518,
  1.223592556,
  0.444671688,
  -0.403345167,
  -0.924328034,
  -1.322125954,
  -1.987787582,
  -2.769142125,
  -2.889037057,
  -1.734594968,
  0.327602241,
  2.086398872,
  2.538359165,
  1.792004065,
  0.877508408,
  0.677453551,
  1.115725877,
  1.410626109,
  1.011702654,
  0.138920975,
  -0.615444439,
  -1.047558151,
  -1.505536761,
  -2.265674331,
  -2.926334078,
  -2.651618597,
  -1.097598567,
  1.013709645,
  2.403757997,
  2.382588888,
  1.447895993,
  0.712967403,
  0.784775322,
  1.270719869,
  1.359443109,
  0.743610749,
  -0.149662639,
  -0.786105005,
  -1.174207876,
  -1.729150091,
  -2.536923123,
  -2.975040749,
  -2.261825292,
  -0.393238485,
  1.614132935,
  2.552999812,
  2.119494641,
  1.130911132,
  0.647612243,
  0.941915375,
  1.376446818,
  1.222766626,
  0.443783531,
  -0.404170797,
  -0.924975134,
  -1.322503754,
  -1.987842982,
  -2.768867225,
  -2.888470657,
  -1.733816448,
  0.328483461,
  2.087259012,
  2.539077465,
  1.792479565,
  0.877674408,
  0.677286651,
  1.115249577,
  1.409907309,
  1.010842274,
  0.138039885,
  -0.616222479,
  -1.048123851,
  -1.505810661,
  -2.265618031,
  -2.925955378,
  -2.650970797,
  -1.096772567,
  1.014597802,
  2.407250237,
  2.390969288,
  1.463233593,
  0.737153203,
  0.819551222,
  1.317699069,
  1.420122439,
  0.819374969,
  -0.057541809,
  -0.676473605,
  -1.046035276,
  -1.581532691,
  -2.369084523,
  -2.786326649,
  -2.051692482,
  -0.161238905,
  1.868372565,
  2.829800452,
  2.419147241,
  1.453696632,
  0.993816243,
  1.311837675,
  1.770403218,
  1.641084546,
  0.886791596,
  0.063843633,
  -0.431666134,
  -0.803654154,
  -1.443260282,
  -2.198418125,
  -2.297414007,
  -1.126930238,
  0.946861471,
  2.713199452,
  3.169034465,
  2.423269865,
  1.506456908,
  1.301541251,
  1.732752677,
  2.018703309,
  1.609212024,
  0.724466075,
  -0.043090499,
  -0.489503721,
  -0.962817261,
  -1.739287631,
  -2.417263478,
  -2.160841087,
  -0.626079627,
  1.465032738,
  2.834001067,
  2.790948888,
  1.833677093,
  1.075600903,
  1.123829422,
  1.585897169,
  1.650565439,
  1.010593319,
  0.093154541,
  -0.567457505,
  -0.977082976,
  -1.551213491,
  -2.376147623,
  -2.829690649,
  -2.130430092,
  -0.274556115,
  1.721160275,
  2.649294252,
  2.205890241,
  1.208196632,
  0.716563343,
  1.003315375,
  1.431092818,
  1.271462386,
  0.487320464,
  -0.365039717,
  -0.889564934,
  -1.290224854,
  -1.958222482,
  -2.741559325,
  -2.863255457,
  -1.710585668,
  0.349751891,
  2.106534272,
  2.556312965,
  1.807649365,
  0.890802908,
  0.688469651,
  1.124662177,
  1.417798509,
  1.017517854,
  0.143834835,
  -0.610976719,
  -1.043133151,
  -1.500848361,
  -2.260546031,
  -2.920734678,
  -2.645658297,
  -1.091505657,
  1.019627143,
  2.409161987,
  2.387164088,
  1.451399093,
  0.715265903,
  0.785869922,
  1.270747869,
  1.358662619,
  0.742367219,
  -0.150982319,
  -0.787124405,
  -1.174611976,
  -1.728727391,
  -2.535593723,
  -2.972866149,
  -2.258997992,
  -0.390054105,
  1.617318485,
  2.555821332,
  2.121629841,
  1.132126732,
  0.647797443,
  0.941098075,
  1.374790418,
  1.220547456,
  0.441352597,
  -0.406436667,
  -0.926725834,
  -1.323464754,
  -1.987853382,
  -2.767902525,
  -2.886645257,
  -1.731368068,
  0.331227911,
  2.089929312,
  2.541312265,
  1.793977365,
  0.878235908,
  0.676842951,
  1.113872077,
  1.407797509,
  1.008303814,
  0.135435875,
  -0.618520409,
  -1.049787551,
  -1.506601861,
  -2.265421131,
  -2.924794178,
  -2.649004997,
  -1.094275067,
  1.017279035,
  2.407074477,
  2.385188988,
  1.449416393,
  0.713196603,
  0.783682722,
  1.268460469,
  1.356335549,
  0.740092729,
  -0.153095899,
  -0.788970305,
  -1.176107176,
  -1.769810691,
  -2.616252423,
  -3.093132849,
  -2.418948092,
  -0.589796175,
  1.377656883,
  2.276110442,
  1.801755041,
  0.772003832,
  0.514050443,
  1.073731175,
  1.773853318,
  1.886128146,
  1.373564246,
  0.792528093,
  0.539105558,
  0.40932203,
  0.011939605,
  -0.501097355,
  -0.352868347,
  1.069299532,
  3.398675441,
  5.424031952,
  6.141948165,
  5.661044865,
  5.011667608,
  5.076615151,
  5.780007677,
  6.340362909,
  6.207399724,
  5.601182695,
  5.114000571,
  4.949616349,
  4.759764039,
  4.267944569,
  3.875562922,
  4.418289903,
  6.239866193,
  8.618150388,
  10.14121767,
  9.852487988,
  8.649780393,
  7.646572503,
  7.450062922,
  7.667883769,
  7.488881539,
  6.605870749,
  5.446037871,
  4.543639995,
  3.890085524,
  3.070025109,
  1.997249577,
  1.294011651,
  1.741771808,
  3.344397965,
  5.085204365,
  5.756887652,
  5.055652741,
  3.798942732,
  3.047325643,
  3.073350875,
  3.239870918,
  2.818634846,
  1.772676066,
  0.658369853,
  -0.128206914,
  -0.791053954,
  -1.721447082,
  -2.767487325,
  -3.152300357,
  -2.263254368,
  -0.467109759,
  1.024891562,
  1.209331905,
  0.194852029,
  -0.988168361,
  -1.456887059,
  -1.287137013,
  -1.260356991,
  -1.393794476,
  -2.000031505,
  -2.487109829,
  -2.651281151,
  -2.840841361,
  -3.332330431,
  -3.724389978,
  -3.181394297,
  -1.359640387,
  1.018705244,
  2.408709217,
  2.386466988,
  1.450156193,
  0.713292303,
  0.783119322,
  1.267315569,
  1.354768609,
  0.738322599,
  -0.154821689,
  -0.790410305,
  -1.177054876,
  -1.730138791,
  -2.535914723,
  -2.972176849,
  -2.257508092,
  -0.388074435,
  1.619418555,
  2.557664612,
  2.122883441,
  1.132547932,
  0.647267143,
  0.939636875,
  1.372554918,
  1.217808016,
  0.438454602,
  -0.409121577,
  -0.928852434,
  -1.324762954,
  -1.988166782,
  -2.767210125,
  -2.885065357,
  -1.729141388,
  0.333771751,
  2.092417772,
  2.543382065,
  1.795325565,
  0.878661908,
  0.676277051,
  1.112384677,
  1.405589409,
  1.005677924,
  0.132754415,
  -0.620886719,
  -1.051511751,
  -1.507446361,
  -2.265271731,
  -2.923675878,
  -2.647078197,
  -1.091813517,
  1.019926729,
  2.409533907,
  2.387112388,
  1.450531693,
  0.713345103,
  0.782842022,
  1.266747169,
  1.353988859,
  0.737441069,
  -0.155681179,
  -0.791127105,
  -1.177528176,
  -1.730302191,
  -2.535745223,
  -2.971698349,
  -2.256787792,
  -0.387213415,
  1.620299315,
  2.558441412,
  2.123447141,
  1.132819432,
  0.647208243,
  0.939255875,
  1.371905318,
  1.216981066,
  0.43756645,
  -0.408746197,
  -0.926017734,
  -1.318406254,
  -1.977360582,
  -2.751159725,
  -2.863101157,
  -1.700705478,
  0.369143761,
  2.135118632,
  2.593755965,
  1.853690265,
  0.945327508,
  0.751559551,
  1.196612977,
  1.499105209,
  1.108829484,
  0.245885035,
  -0.497453199,
  -0.917486051,
  -1.362587361,
  -2.109395431,
  -2.756659178,
  -2.468856497,
  -0.902371727,
  1.220568178,
  2.621336417,
  2.610037688,
  1.684558893,
  0.958484403,
  1.039142622,
  1.534298869,
  1.632917339,
  1.027897039,
  0.146463211,
  -0.477140185,
  -0.851568076,
  -1.392275491,
  -2.185604623,
  -2.609445849,
  -1.882470892,
  -0.000915605,
  2.018473055,
  2.968381752,
  2.545057941,
  1.566033232,
  1.091997343,
  1.395638075,
  1.839942718,
  1.696772446,
  0.929234906,
  0.093730283,
  -0.413691854,
  -0.797107354,
  -1.447906382,
  -2.214326125,
  -2.319632097,
  -1.151315298,
  0.923774501,
  2.694352252,
  3.157009165,
  2.420446165,
  1.515145208,
  1.324078851,
  1.771554377,
  2.076262909,
  1.688058824,
  0.827085825,
  0.085643611,
  -0.332563391,
  -0.775920961,
  -1.521092331,
  -2.166858378,
  -1.877729117,
  -0.310114952,
  1.813742988,
  3.215218767,
  3.204434688,
  2.279310593,
  1.553475703,
  1.634309922,
  2.129630569,
  2.228447939,
  1.623695049,
  0.742615601,
  0.119454065,
  -0.254461256,
  -0.794616591,
  -1.587395023,
  -2.010731249,
  -1.283338202,
  0.598516305,
  2.618067365,
  3.568000452,
  3.144579041,
  2.165366132,
  1.691093743,
  1.994496775,
  2.438608918,
  2.295329946,
  1.527793066,
  0.688807593,
  0.174774896,
  -0.218081614,
  -0.880897852,
  -1.661693635,
  -1.783544057,
  -0.633768128,
  1.420946401,
  3.169472652,
  3.608560465,
  2.847070265,
  1.915644108,
  1.697411251,
  2.116827577,
  2.392719209,
  1.975057124,
  1.084078775,
  0.312153514,
  -0.136968751,
  -0.611649661,
  -1.388544731,
  -2.066437578,
  -1.809843857,
  -0.275176149,
  1.815331488,
  3.183073367,
  3.138206588,
  2.178699593,
  1.418240403,
  1.464273322,
  1.924678869,
  1.988523439,
  1.348783669,
  0.432729648,
  -0.225386065,
  -0.634245276,
  -1.209359291,
  -2.037146923,
  -2.495581949,
  -1.803414362,
  0.04306014,
  2.027062235,
  2.941279552,
  2.481994441,
  1.466803832,
  0.956484243,
  1.223820275,
  1.631893518,
  1.452644046,
  0.649232196,
  -0.219521997,
  -0.757824434,
  -1.170015154,
  -1.847752682,
  -2.639538125,
  -2.768885357,
  -1.623507428,
  0.429560361,
  2.178890862,
  2.620979565,
  1.864475265,
  0.939845708,
  0.730076051,
  1.159499977,
  1.446834909,
  1.041948914,
  0.164976015,
  -0.591822569,
  -1.024811351,
  -1.482471761,
  -2.241581231,
  -2.901042478,
  -2.625481697,
  -1.071408247,
  1.038866042,
  2.426679247,
  2.402154488,
  1.463246793,
  0.723647503,
  0.790814822,
  1.272647469,
  1.358227419,
  0.740537969,
  -0.153157039,
  -0.788626705,
  -1.174589576,
  -1.726606291,
  -2.531152523,
  -2.966261149,
  -2.250736192,
  -0.380917205,
  1.626387925,
  2.563856162,
  2.127777541,
  1.135772332,
  0.648652443,
  0.939243675,
  1.370668018,
  1.214899216,
  0.435118471,
  -0.412249047,
  -0.931181334,
  -1.325830454,
  -1.987700982,
  -2.765166725,
  -2.881632357,
  -1.724711968,
  0.338655481,
  2.097141952,
  2.547348065,
  1.798034565,
  0.879786208,
  0.675705851,
  1.110240777,
  1.402212309,
  1.001576334,
  0.128535475,
  -0.624602529,
  -1.054177351,
  -1.508664861,
  -2.264851531,
  -2.921657678,
  -2.643728997,
  -1.087588907,
  1.024446764,
  2.413726527,
  2.390399488,
  1.452461393,
  0.713655203,
  0.781496722,
  1.263942569,
  1.350125239,
  0.733066859,
  -0.159946439,
  -0.794679705,
  -1.179864876,
  -1.731091091,
  -2.534872123,
  -2.969282849,
  -2.253166292,
  -0.382892195,
  1.624715575,
  2.562334442,
  2.126271941,
  1.134180932,
  0.646916643,
  0.937353475,
  1.368660418,
  1.212850536,
  0.433131412,
  -0.414061957,
  -0.932715334,
  -1.327005054,
  -1.988472582,
  -2.765536225,
  -2.881646257,
  -1.724456798,
  0.339064221,
  2.097575152,
  2.547680365,
  1.798161265,
  0.879637108,
  0.675254951,
  1.109509077,
  1.401264409,
  1.000511154,
  0.127471725,
  -0.625543209,
  -1.054887851,
  -1.509067861,
  -2.264910731,
  -2.921382978,
  -2.643175297,
  -1.086848837,
  1.025256014,
  2.414479337,
  2.390979388,
  1.452777193,
  0.713653803,
  0.781170622,
  1.263330369,
  1.349306629,
  0.732151089,
  -0.160835899,
  -0.795422505,
  -1.180360976,
  -1.731274491,
  -2.534720423,
  -2.968820349,
  -2.252460792,
  -0.382045225,
  1.625582875,
  2.563098252,
  2.126823241,
  1.134440532,
  0.646846743,
  0.936962575,
  1.368002218,
  1.212016446,
  0.432237609,
  -0.414890787,
  -0.933363534,
  -1.327382354,
  -1.988526582,
  -2.765259825,
  -2.881078857,
  -1.723678538,
  0.339943621,
  2.098431802,
  2.548393565,
  1.798630665,
  0.879796408,
  0.675081551,
  1.109027177,
  1.400541409,
  0.999648464,
  0.126590355,
  -0.626319619,
  -1.055450351,
  -1.509337561,
  -2.264849931,
  -2.921000178,
  -2.642524497,
  -1.086021417,
  1.026143745,
  2.415302627,
  2.391622588,
  1.453149893,
  0.713703603,
  0.780890422,
  1.262759569,
  1.348525369,
  0.731269049,
  -0.161694859,
  -0.796137805,
  -1.180832076,
  -1.731435291,
  -2.534548423,
  -2.968339649,
  -2.251738992,
  -0.381183615,
  1.626463205,
  2.563873652,
  2.127384741,
  1.134709332,
  0.646785043,
  0.936578975,
  1.367350718,
  1.211188466,
  0.431349443,
  -0.415714407,
  -0.934006934,
  -1.327755154,
  -1.988576382,
  -2.764979725,
  -2.880508157,
  -1.722897398,
  0.340825491,
  2.099290542,
  2.549108565,
  1.799101465,
  0.879956908,
  0.674909251,
  1.108546177,
  1.399819309,
  0.998786724,
  0.125709975,
  -0.627094979,
  -1.056011851,
  -1.509606261,
  -2.264788131,
  -2.920616578,
  -2.641872897,
  -1.085193397,
  1.027031879
};

// Cascade three second-order notch filters
// Signs on a's are backwards from what MATLAB gives you.
float32_t notch_coeffs[15] = {
    0.9845, -1.8308, 0.9845, 1.8308, -0.9691, // 60 Hz Notch
    0.9845, -1.4354, 0.9845, 1.4354, -0.9691, // 120 Hz Notch
    0.9845, -0.8384, 0.9845, 0.8384, -0.9691 // 180 Hz Notch
};
uint8_t notch_numstages = 3;
float32_t notch_state[6] = {0};
                                             
// ********** //

// ***** Libraries, Variables, and Helper Functions for the MicroSD Card ***** //
#include <wchar.h>
#include "ff.h"

FRESULT rc;        /* Result code */
FATFS fatfs;      /* File system object */
FIL fil_input;        /* File object */
FIL fil_output;
FIL fil_timing_peaks;
DIR dir;        /* Directory object */
FILINFO fno;      /* File information object */
UINT bw, br;
char buff[128];
TCHAR wbuff[128];

/* Stop with dying message */
void die(const char *text, FRESULT rc) {
  Serial.printf("%s: Failed with rc=%u.\r\n", text, rc);  for (;;) delay(100);
}

TCHAR * char2tchar( char * charString, size_t nn, TCHAR * tcharString) {
  for (size_t ii = 0; ii < nn; ii++) tcharString[ii] = (TCHAR) charString[ii];
  return tcharString;
}

char * tchar2char(  TCHAR * tcharString, size_t nn, char * charString){
  for(size_t ii = 0; ii<nn; ii++) charString[ii] = (char) tcharString[ii];
  return charString;
}
// ********** //

// ***** Libraries and Variables for ADXL345 ***** //
#include <SparkFun_ADXL345.h>
#define ADXL_CS_PIN 10
ADXL345 adxl = ADXL345(10);
// **********

// ***** Low Power Mode Configuration *****
//#include "Snooze.h"
//SnoozeDigital digital;
//SnoozeBlock config(digital);

void setup() {
    // Wait for serial to open. No need for Serial.begin() because Teensy has native USB
    while (!Serial);
    Serial.println("Hello World!");

    pinMode(23, OUTPUT);
    f_mount(&fatfs, (TCHAR*)_T("/"), 0); /* Mount/Unmount a logical drive */

    // Overwrite existing output file if it exists
    rc = f_open(&fil_output, (TCHAR*)_T("samples_filtered.csv"), FA_WRITE | FA_CREATE_ALWAYS);
    if (rc) die("Open", rc); // Exit if file failed to open
    rc = f_open(&fil_timing_peaks, (TCHAR*)_T("filter_timing_peaks.csv"), FA_WRITE | FA_CREATE_ALWAYS);
    if (rc) die("Open", rc); // Exit if file failed to open
    rc = f_open(&fil_input, (TCHAR*) _T("samples.csv"), FA_READ);
    if (rc) die("Open",rc);
    Serial.println("Opened Files!");
 
    //size_t numsamples_total = 650000;
    size_t numsamples_total = 0;
    size_t numsamples_window = 3600;
    float* ecg_data = new float[numsamples_window];
    
    // Read in all the ECG data and filter it
    char *val2_ptr;
    for(size_t i=0; i<numsamples_total; i+=numsamples_window) {
        if(i+numsamples_window > numsamples_total - 1)
            numsamples_window = numsamples_total - i;
        //f_lseek(&fil,file_idx_input);
        for (size_t j=0; j<numsamples_window; ++j) {
            if(!f_gets(wbuff, sizeof(wbuff), &fil_input)) break; // Read a line from the csv file
            tchar2char(wbuff, 128, buff); // Convert to char array
            // Search line for comma. This method assumes only two values per line in csv.
            for(size_t k=0; k<sizeof(buff); ++k) {
              if(buff[k] == ',') { 
                val2_ptr = buff + k + 1;
                break;
              }
              else if(buff[k] == '\n')
                 break;
            }
            float val2 = atof(val2_ptr);
            ecg_data[j] = val2;
        }

        digitalWrite(23, HIGH);
        uint32_t start = micros();
        uint16_t numpeaks = ecg_filter.pan85_countpeaks(ecg_data, numsamples_window);
        uint32_t end = micros();
        digitalWrite(23, LOW);
        sprintf(buff, "%lu,%u\n", end-start, numpeaks);
        char2tchar(buff, 128, wbuff);
        bw = f_puts(wbuff, &fil_timing_peaks);
        
        for (size_t i = 0; i < numsamples_window; ++i) {
            sprintf(buff, "%f,\n", ecg_data[i]);
            char2tchar(buff, 128, wbuff);
            bw = f_puts(wbuff, &fil_output);
        }
        Serial.printf("Processed %lu of %lu\r", i+numsamples_window, numsamples_total);
    }
    
    rc = f_close(&fil_input);
    if (rc) die("Close", rc);
    rc = f_close(&fil_output);
    if (rc) die("Close", rc);
    rc = f_close(&fil_timing_peaks);
    if (rc) die("Close", rc);
    delete [] ecg_data;
    Serial.println("");
    Serial.println("All done!");

    arm_biquad_cascade_df2T_instance_f32 notch;
    arm_biquad_cascade_df2T_init_f32(&notch, notch_numstages, notch_coeffs, notch_state);
    uint32_t blockSize = 800;
    float32_t ekgc_filtered[800] = {};
//    for(int i=0; i<800; ++i)
//        ekgc_filtered[i] = 0;
    arm_biquad_cascade_df2T_f32(&notch, ekgc, ekgc_filtered, blockSize);
   
    for(int i=0; i<blockSize; ++i)
        Serial.printf("%f\n", ekgc_filtered[i]);
    
     arm_biquad_cascade_df2T_f32(&notch, ekgc, ekgc_filtered, blockSize);
      for(int i=0; i<blockSize; ++i)
        Serial.printf("%f\n", ekgc_filtered[i]);
    // Setup ADXL345
    //digital.pinMode(9, INPUT_PULLUP, RISING); // ADXL Interrupt Pin
    adxl.setSpiBit(0); // Use 4-wire SPI
    adxl.powerOn();
    adxl.setRangeSetting(16);
    adxl.setImportantInterruptMapping(1, 1, 1, 1, 1); // Put all interrupts on pin 1

}

void loop() {
  //int who = Snooze.deepSleep(config);
  
  int x, y, z;
  adxl.readAccel(&x, &y, &z);
  //ADXL_ISR();
  //Serial.printf("%d, %d, %d\n", (int16_t)x, (int16_t)y, (int16_t)z);
  float ecg_rt = analogRead(A0)/1024.0*3.3;
  //Serial.println(ecg_rt);
  delay(1);
}

/********************* ISR *********************/
/* Look for Interrupts and Triggered Action    */
void ADXL_ISR() {
  
  // getInterruptSource clears all triggered actions after returning value
  // Do not call again until you need to recheck for triggered actions
  byte interrupts = adxl.getInterruptSource();
  
  // Free Fall Detection
  if(adxl.triggered(interrupts, ADXL345_FREE_FALL)){
    Serial.println("*** FREE FALL ***");
    //add code here to do when free fall is sensed
  } 
  
  // Inactivity
  if(adxl.triggered(interrupts, ADXL345_INACTIVITY)){
    Serial.println("*** INACTIVITY ***");
     //add code here to do when inactivity is sensed
  }
  
  // Activity
  if(adxl.triggered(interrupts, ADXL345_ACTIVITY)){
    Serial.println("*** ACTIVITY ***"); 
     //add code here to do when activity is sensed
  }
  
  // Double Tap Detection
  if(adxl.triggered(interrupts, ADXL345_DOUBLE_TAP)){
    Serial.println("*** DOUBLE TAP ***");
     //add code here to do when a 2X tap is sensed
  }
  
  // Tap Detection
  if(adxl.triggered(interrupts, ADXL345_SINGLE_TAP)){
    Serial.println("*** TAP ***");
     //add code here to do when a tap is sensed
  } 
}


